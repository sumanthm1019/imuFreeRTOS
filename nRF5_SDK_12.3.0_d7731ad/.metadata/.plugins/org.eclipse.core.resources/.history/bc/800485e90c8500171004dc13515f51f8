/*
 * i2c.c
 *
 *  Created on: Aug 19, 2017
 *      Author: Sumanth
 */

#include "i2c.h"

/*
 * @brief Static Variables
 */


/* TWI instance ID. */
#define TWI_INSTANCE_ID     0
/* TWI instance. */
static const nrf_drv_twi_t m_twi = NRF_DRV_TWI_INSTANCE(TWI_INSTANCE_ID);

/**
 * @brief i2c event handler
 */
/**
 * @brief TWI events handler.
 */
void twi_handler(nrf_drv_twi_evt_t const * p_event, void * p_context)
{
    switch (p_event->type)
    {
        case NRF_DRV_TWI_EVT_DONE:
            if (p_event->xfer_desc.type == NRF_DRV_TWI_XFER_RX)
            {
                NRF_LOG_INFO("Data has been received\r\n");
            }
            break;
        default:
            break;
    }
}
/**
 * @brief Function initializes i2c drivers
 */
uint16_t i2cInit(i2c_cfg_t *i2c)
{
	uint16_t errNum = 0;
	const nrf_drv_twi_config_t i2c_adf009_config = {
			.scl 				= i2c->scl,
			.sda 				= i2c->sda,
			.frequency			= NRF_TWI_FREQ_100K,
			.interrupt_priority = APP_IRQ_PRIORITY_HIGH,
			.clear_bus_init 	= false };

	errNum = nrf_drv_twi_init(&(i2c->instance), &i2c_adf009_config, twi_handler, NULL);
	if(errNum) { NRF_LOG_ERROR("[nrf_drv_twi_init] Failed to initialize twi [Error Num 0x%02x]\r\n", errNum); }

	nrf_drv_twi_enable(&m_twi);
	return errNum;
}

/**
 * @brief Function to write data on i2c bus
 */
uint16_t i2cWrite(i2c_cfg_t *i2c, uint8_t *data, uint8_t reg)
{
	uint16_t errNum = 0;

    err_code = nrf_drv_twi_tx(&(i2c->instance), reg, data, sizeof(data), false);
    APP_ERROR_CHECK(err_code);
    while (m_xfer_done == false);


	return errNum;
}



